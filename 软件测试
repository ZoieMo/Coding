1、是什么？

为了发现错误而执行程序的过程。即根据程序内部结构设计一批测试用例（输入和预期输出），来运行程序以发现错误。

2、目的

发现错误和缺陷，方便改正，以规避商业风险。

规范流程：需求测试->概要设计测试->详细设计测试->单元测试->集成测试->系统测试->验收测试

3、各种类型的测试

需求文档测试：测试需求的逻辑矛盾以及技术可行性

设计文档测试：测试设计是否合理以及是否满足全部需求

α测试：一个用户在开发环境下进行、或者公司内部的用户在模拟实际操作环境下进行的受控测试，目的是评价软件产品的功能、可使用性、可靠性、性能和支持。可以在

软件产品编码结束之后开始，或在模块(子系统)测试完成后开始，也可以在确认测试过程中产品达到一定的稳定和可靠程度之后再开始，测试结果可以现场反馈给开发人员。


β测试：软件的多个或一个用户在实际环境下进行（开发者无法控制的环境），应该尽可能由主持产品发行的人员管理，Beta测试着重于产品的支持性，包括文档、

客户培训和支持产品的生产能力。只有当Alpha测试达到一定的可靠程度后，才能开始Beta测试。

注意：两种测试都不能由程序员或测试员完成。

4、驱动模块和桩模块

驱动模块：“主程序”，由于单元测试一个函数单元时，被测单元本身是不能独立运行的，需要驱动模块接收测试数据并将这些数据传递到被测试模块。

1-3、接受、判断、传递输入，驱动被测单元执行;
4、接受被测单元执行结果，并对结果进行判断;
5、将判断结果作为用例执行结果输出测试报告。

桩模块：集成测试前要为被测模块编制一些模拟其下级模块功能的“替身”模块，即为函数A内部需要调用的函数B写桩，来模拟函数B的功能，保证其正确。

5、白盒测试和黑盒测试

白盒测试：是对源码的测试，又叫逻辑驱动测试或者结构测试。测试的主要内容包括词法分析与语法分析、静态错误分析、动态检测等，知道产品内部工作过程，

可按照程序内部的结构测试程序，检验程序中的每条通路是否都有能按预定要求正确工作。

主要检测以下：

1、对程序模块的所有独立的执行路径至少测试一遍；

2、对所有的逻辑判定，取“真”与取“假”的两种情况都能至少测一遍；

3、在循环的边界和运行的界限内执行循环体；

4、测试内部数据结构的有效性，等等。

主要方法有逻辑驱动、基路测试等(穷举路径测试)，包括：

静态测试：依靠人工或者软件工具（Fxcop）进行包括代码检查、静态结构分析、代码质量度量、文档测试等等。

动态测试：需要执行代码，通过运行程序找到问题，包括功能确认与接口测试、覆盖率分析、性能分析、内存分析等。

六种逻辑覆盖包括语句覆盖、判定覆盖、条件覆盖、判定/条件覆盖、条件组合覆盖和路径覆盖。

测试用例设计有如下方法：

基本路径测试\边界值分析\覆盖测试\循环测试\数据流测试\程序插桩测试\变异测试，依据是详细设计说明书及其代码结构。

缺点：无法检查出程序是否是一个错误的程序；穷举路径测试不可能检查出程序因为遗漏路径而出错；穷举路径测试发现不了一些与数据相关的错误。



黑盒测试：又叫数据驱动测试或者功能测试，完全不考虑程序内部的逻辑结构和内部特性，只依据产品功能设计的规格，测试功能是否符合要求。

主要检测以下几类错误：

1、是否有不正确或遗漏的功能?

2、在接口上，输入是否能正确的接受?能否输出正确的结果?

3、是否有数据结构错误或外部信息(例如数据文件)访问错误?

4、性能上是否能够满足要求?

5、是否有初始化或终止性错误?

主要方法有：等价类划分法；边界值分析法；因果图法；场景法；正交实验设计法；判定表驱动分析法；错误推测法；功能图分析法。

测试用例设计方法：

基于用户需求的测试\功能图分析方法\等价类划分方法\边界值分析方法\错误推测方法\因果图方法\判定表驱动分析方法\正交实验设计方法，

依据是用户需求规格说明书,详细设计说明书。

6、静态测试和动态测试

动态测试：通过运行程序测试软件，通常使用白盒测试和黑盒测试从不同的角度设计测试用例。

静态测试：不运行被测程序本身，通过评审文档、阅读代码等方式测试软件称为静态测试。

7、回归测试

回归测试：对程序员修改后发布新的软件包或新的软件补丁包重新进行测试，以保证程序能在修正了以前bug的情况下，正常运行且不会带来新的错误。

8、软件的缺陷等级划分

严重性：对客户满意度影响的程度（功能角度）

（1）致命错误：模块异常或死机等；

（2）严重错误：本模块功能失常或异常退出；

（3）一般错误：模块功能部分失效；

（4）建议模块：由问题提出人对测试模块改进的建议。


优先级：缺陷被修复的紧急程度（x修复角度）

（1）立即修复：系统功能几乎不能用或者测试不能继续（立即修复）；

（2）高优先级：缺陷严重，影响测试（优先考虑）；

（3）正常优先级：正常排队等待修复；

（4）低优先级：可以有时间的时候修复。

9、软件测试应该划分几个阶段?

单元测试：检验软件基本组成单位的正确性（白盒测试、软件动态测试，依据详细设计文档，测试重点是系统的模块）。

集成测试：在软件系统集成过程中所进行的测试，其主要目的是检查软件单位之间的接口是否正确（主要采用黑盒测试方法，辅之以白盒测试方法，依据概括设计文档，

测试重点是模块间的衔接以及参数的传递）。

系统测试：验证软件系统的正确性和性能等满足其规约所指定的要求，检查软件的行为和输出是否正确（测试的“先知者问题”，仅仅应用黑盒测试方法，依据系统设计文档，

测试重点是整个系统的运行以及与其他软件的兼容性）。

验收测试：向软件的购买者展示该软件系统满足其用户的需求。它的测试数据通常是系统测试的测试数据的子集。

每个阶段又分为以下五个步骤: 测试计划（属于项目阶段性关键文档，因此需要同行评审），测试设计，用例设计，执行结果，测试报告。

10、软件质量的六个特征（软件质量国家标准GB-T8566-2001G）

1）功能：与功能或性质有关的属性；

2）可靠：规定时间内维持性能水平；

3）易用：用户为使用软件所做出的的努力和评价；

4）效率：维持其性能水平与所使用资源量；

5）可维护：进行制定修改所需的努力；

6）可移植：从一个环境移植到另一个环境的能力。

11、黑盒测试主要方法

1）等价类划分：将系统的输入域划分为若干部分，然后从每个部分选取少量代表性数据进行测试。等价类可以划分为有效等价类和无效等价类。

2）边界值分析法：对输入或输出的边界值进行测试，如整数上下界、光标的边界位置、数组首尾元素、循环始末位置等。通常边界值分析法是作为对等价类划分法的补充。

3）正交试验法：从大量的试验点中挑选出适量的、有代表性的点。是一种基于正交表的高效率、快速、经济的试验设计方法。

4）状态转移法：对一个状态在给定的条件内能够产生需要的状态变化判断有没有出现不可达或非法的状态，设计足够的用例达到

对系统状态、条件组合、状态迁移路径的覆盖。

5）流程分析法：主要针对流程测试场景的测试项下的测试子项进行设计，借鉴了白盒测试中的路径覆盖分析法。

6）输入域测试法：针对输入会有各种各样的输入值的一个测试，主要考虑极端测试、中间范围测试，特殊值测试。

7）输出域分析法：对输出域进行等价类和边界值分析，确定是要覆盖的输出域样点，反推得到应该输入的输入值，从而构造出测试用例，

目的是为了达到输出域的等价类和边界值覆盖。

8）判定表分析法：分析和表达多种输入条件下系统执行不同动作的工具，可以把复杂的逻辑关系和多种条件组合的情况表达的即具体又明确。

9）因果图法：用于描述系统输入输出之间的因果关系、约束关系。因果图的绘制过程是对被测系统的外部特征的建模过程，根据输入输出间的因果图可以得到判定表，

从而规划出测试用例。

10）错误猜测法：主要是针对系统对于错误操作时对于操作的处理法的猜测法，从而设计测试用例。

11）异常分析法：是针对系统有可能存在的异常操作，软硬件缺陷引起的故障进行分析，分析发生错误时系统对于错误的处理能力和恢复能力依此设计测试用例。

